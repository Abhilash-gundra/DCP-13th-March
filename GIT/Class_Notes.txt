DCP - 13th Mar. 2023 7AM - 9AM IST
	
#######
DAY-1
#######

	Introduction to DevOps!
	
	DevOps!!!!		Is a software development strategies 

		Applications ::
			Desktop Applications	--> Create a billing system for retail shop
			Web Applications
			Mobile Applications
	
	SDLC ??? Software Development LifeCycle ???
	
	Requirement Analysis 
	Design Documents
	Development/Coding
	Testing 
	Deployed to Prod.
	Monitor...
	
	Waterfall Model -- Linear in fashion.  Create a billing system for retail shop  6month
	
		1.Requirement Analysis 
		2.Design Documents
		3.Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
	
	Complete Application :
		Monolith Application Architecture --> Tightly coupled.

Module 1: developed --> Unit level testing ==> Integrated to Higher Environments ==> Finally Released to Production

Module 2: developed --> Unit level testing ==> Integrated to Higher Environments ==> Finally Released to Production


Create a New Change Request1 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
Create a New Change Request2 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
Agile Methodologies!

	Application ::: Modules --> Iterations.
	
Create Module/Iteration1 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
Create Module/Iteration2 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...

Create Module/Iteration3 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
	
Create Module/Iteration4 :

		Requirement Analysis 
		Design Documents
		Development/Coding
		Testing 
		Deployed to Prod.
		Monitor...
		
	Independently develop and Test the changes ===> 
	
	Continuous Integration  --> Continuous Delivery 
	

Who are all involved in the process :::

	- Developers
	- Tester
	- Business Analyst
	- Quality Team
	- Security Team
	- Deployment Team 
	
	
	- Business Analyst 
	- App/Dev Team - Appln. Owner/Leads/Architect
		Developers 
	- Testing Team 					How much time they take to complete the testing ???
	- Production Support Team
	- Monitoring Team 
	- Release Management Team 
	- Security Team 
	
	Non-Prod Environment							PROD Environment
	
		Dev (Developer) 
		Test (Testing Team)
			QA
			UAT
			Pre-Prod / Staging			===>			Prod
	
	On-Premises				<cloud Adoption>		 Cloud Environment
	
		Application Modernization
		Legacy Modernization
	

DevOps :: 

	Continuous Integration  --> Continuous Delivery --> Continuous Deployment
	
	DevOps Team ---> 

	Environment							
	
		Dev (Developer) 		Java web application 	--> build(Compile and create artifacts(binaries- *.war/*.jar) 
														--> Perform Unit Testing 
														--> promote the code to testing Team
		Test (Testing Team)
			QA
			UAT			User Acceptance Testing -->> Validate --> Business Users
			Pre-Prod / Staging		
		( )	
		Prod 
	
	
	
DevOps Stages :::

	Continuous Development 		--> Tools -- IDE - Eclipse based IDEs / VS Code -- Integrate the code
	Continuous Integration		--> promote the code to testing Team
	Continuous Testing			--> Automated testing & notifications 
	Continuous Delivery/Deployment -->
			Delivery 	--> Expects Manual Approval before PROD Release
			Deployment 	--> No need for any Manual Approvals before prod release
	Continuous Monitoring 
	
	Non-Prod				<<<<<<----->>>>>> 	PROD
	
	Identify all the possible issues at the very early stage and fix it.
	
	
Security ::

	DevSecOps
	
Application ::

Banking!!!!

	On-Banking! 
	
		Downtime -- Production Deployment Window --> 4 - 6hrs. 
		
Online - E-Commerce  / Facebook 


	Monolith Application Architecture ::
		Modules/Task/Iteration
	
	Micro-Service Based Application Architecture :::
		Services
	
www.amazon.com 

	Sign-up		-- Micro-Service1 - Developer1 - create, test, integrate to QA/UAT --> Release to PROD
	Sign-in 	-- Micro-Service2 - Developer2 - create, test, integrate to QA/UAT --> Release to PROD
	Search		-- Micro-Service3 - Developer3 - create, test, integrate to QA/UAT --> Release to PROD
	Add to Cart 
	Place the order 
	payment 
	confirm
	tracking 
	
Next :
	Create AWS Account 
	Access to Lab 
	
	
#######
DAY-2
#######
		Various DevOps Tools & its features.
		Access the Lab, Class Notes
		AWS - Free tier account 
			Create EC2 Instances ....
			
		DevOps is all about : 
		
			People		
			Process
			Tools 

Telecomm ::

	Service Provider1 --> introduce a new offer --> DEV, OPS --> Customers ASAP
	Service Provider2 -->>>
	
		Detailed Assessment ::
		Assessment Report & Recommendations!
		Implementation 
		
	- Developers
	- Tester
	- Business Analyst
	- Quality Team
	- Security Team
	- Deployment Team 
	
	
	- Business Analyst 
	- App/Dev Team - Appln. Owner/Leads/Architect
		Developers 
	- Testing Team 					How much time they take to complete the testing ???
	- Production Support Team
	- Monitoring Team 
	- Release Management Team 
	- Security Team 
	
	
	DevOps ---> DevSecOps ---> SRE --> GITOps ---> AIOps 
	
	Continuous Development 		--> Tools -- IDE - Eclipse based IDEs / VS Code -- Integrate the code
	Continuous Integration		--> promote the code to testing Team
	Continuous Testing			--> Automated testing & notifications 
	Continuous Delivery/Deployment -->
			Delivery 	--> Expects Manual Approval before PROD Release
			Deployment 	--> No need for any Manual Approvals before prod release
	Continuous Monitoring 


		Continuous Improvement!!!!!
	

	Tools ::::
	
		AWS 
		
		AZ 
	
	
	Plan ::: ALM Tools - Application LifeCycle Management Tools 
		JIRA
		AZ Board
	
	Code ::: 	Eclipse Based IDE, GIT Development Team ==> JAVA, Python, NodeJS, Angualar, .Net 
				Visual Studio Code
					shell Scripts, Groovy, Python, yaml scripts 
					
				Python Scripting ==> AWS ==> AWS CLI ,, AZ 
	
	Build ::: Jenkins -->
	
	Monitor :: Prometheus & Grafana 
	
		Application Monitoring 					==> AppDynamics
		Infra-Structure Monitoring 	Memory,CPU, ==> Prometheus & Grafana 
	
	
	Infra-Pipeline :
	Automate Infra Provisioning ---> Configure the server 
	
	
	Build & Test 
	
	Pipeline ::
	
		Build ---> Infra-pipeline ---> Test 
		
		
				Build ---> Automate Infra Provisioning ---> Configure the server  ---> Test
				
	Create any automation script / Pipeline : --> It shd be generic and reusable.
	
	
	Jenkins --> Build Orchestration Tool 
	
	Kubernetes --> Container Orchestration Tool
	
	Java Application --> MAVEN/ANT/GRADLE - Build Tools 
	

		
	Java Appln. 
	
	Retails :::
	
	On-Premises  	===> 	Cloud 
	
	Migration1
	
	DevOps Implementation
		Assessment !
			Team
			Create policies/Stragies 
			Tools 
		DevOps Team ::
			GIT 			2 resources Repo Mgmt 
			Jenkins 
			Ansible
			Docker/Kubernetes
		Onboard the Applications to DevOps 
			PoC Appln. 
			VersionOne,JIRA,AzBoard
			
		Onboard -- Appln.
		
			DEV --> Test Release
		
		CICD Pipeline :
		
			Build -- create artifacts 
			deploy the appln. to test envi.
			automated testing 
			feedback will be sent to the users 
			Dployed to prod .
			
		JIRA --> 
	
		Cloud Adoption ::: 
	

	
		Access the Lab, Class Notes
		AWS - Free tier account 
		Create EC2 Instances ....
		
		
	Today :::
	
		-> Create Github Account 		- Remote Repository to maintain the files and folders 
		-> Create AWS Free Tier Account 
		

#######
DAY-3
#######

		Version Control System using GIT. 
		
			Developer --> 
				Dev tools :::
					Code Editor 
					
					Eclipse based IDEs like Visual studio Code, IntelliJ, MS Visual Studio
					
					java 
					html
					jsp
					.net
					c#
					python 
					
		save the program!!!
		
		index.jsp 
			---
			-
			-
			-
			-
			-
			-
			---
			
		index.jsp 
			---
			-
			-
			-
			-fadasdf
			-
			-
			---	
			asdfasdf
			
			asdfasdfdf
			sdf
			
			
		Version Control System.
			Save the files 
			version control it.
			to track the changes 
			
		GITHUB.
		
		Remote Repo. 
		
			index.jsp 
				---> index.jsp_v1.0 (tag/Commit_ID)  10-lines
				---> index.jsp_v1.1 +20 lines
				---> index.jsp_v1.2 -05 lines
				---> index.jsp_v1.3
				---> index.jsp_v1.4
				---> index.jsp_v1.5
				
	Deployment ::: appln.version_v1.12
	
		Deployment window for PROD ::
			4 hr - 6 hrs 
				appln.version_v1.13
				
	How to version control the files/Changes ??
	
			GIT 
			
	
	Developer1 ::: Webappln.
	
		java web application :
		
		Java_Project : (Project Folder)
		
			
		Local VCS :::
		
		Centralized VCS ::: --> Google docs -
		
		Distributed VCS ::: (GIT)
		
		
		
		Local Repository							Remote Repository
		
		
		Git File Workflow
		How to effectively do parallel development
			Git Branches
			Git Branching Strategies
		Git Commands -- used in day-to-day activities
		How to Handle Local and Remote Repositories.
		
			- Git is Distributed Version Control System
			- Used to version control the source code/files 
			- Used to Track the Changes 
				Who? when? In file?
			- Used to perform parallel Development.
			
		
		index.html 
		--
		--
		-- 
		commit --> index.html_v1.0
		--
		---
		-
		-----
		--
		commit --> index.html_v1.1		

		- GIT is Open-source	

	
		GIT Workflow:
		
		
		Local Repo.(Local Machine)													Remote Repo.
		
		repository is a collection of files and folders 
		
		index.jsp 
			git add >>> Staging Area
									git commit >>> Local Repo.
									
																>>> Git push
																
		Local Repo.(Local Machine)			staging 		local repo
		Project1 
		
			f1.html
			f2,f3,f4,f5,f6						f6			f6	
		
		
		
		folder1 ==> .git 
		
		working dir. 
		
		git clone			--> Used to clone/copy the remote repo into local repo 
		
		git add 			--> add the changes from working dir to staging area 
		
		git commit 			--> commit the changes to local repo from stagin area  
		
		git push 			--> push the changes from local repo to remote repo.
		
		git fetch 		 fetch 	
			--> used to check if there are any incremental changes happened in repo.
									if there is any changes available, it jus updates the local repo.
		checkout/merge 
		git pull 		fetch + merge 
		
			--> used to check if there are any incremental changes happened in repo and to updates the changes with the working dir.
			
		clone vs fetch vs pull 
		
		clone vs fork ??
		
		fork 	--> used to copy the remote repositories 
		
		source remote repo			==> 	target remote repo 
		
		Remote Repository :::::
		
		clone 
		
		
		Repositories !
			
		GIT vs GITHUB
		
		
		Remote Repositories :::
		
			Github
			Gitlab
			Bitbucket
			AZ Repo
			AWS Repo 
			
			GIT Remote 
			
			VM's -- GIT client 
			
			git
		
		Appln. Program:
		
		5 funcs 
		
			func()
			{adfasd
			adfasdasd
			fsdf
			asdfasdff
			asdfasdfdfsadf
			}
			
			func1()
			{adfasd
			adfasdasd
			fsdf
			asdfasdff
			asdfasdfdfsadf
			}		
		
		Install GIT ::::
			Windows :::
				GIT BASH			--> CUI
				GIT GUI				--> 
				
		Windows ::
		
			SSH Client is to to connect to the remote servers 
				MobaXterm for windows
				Putty
			Terminal 
				
				

#######
DAY-3
#######			
		
		Local Git Repo.
		
			git init
			git add
			git commit 
			
		
		
		GIT BASH & GIT GUI 
		
		
		git init -- used to initialize a local git repo.
						--> .git folder ==> 
						--> Created a default branch (master/main)
		
		Local Machine :
		
		Working dir.		---->			staging Area			----> 		Local Repo
		
		
		
		Tracking :::
			Who ? when ? What ?
			
		git config user.name , user.email 
		
			Local 
			global 
			
		git config --global user.name "Loksai"
		git config --global user.email "xyz@az.com"
		
		Local Config :
		git config user.email "xyz@az.com"
		
		DEV Team: 
		
		
		Project_ID 
		CR_No
		
		service id
		
		d1,d2,d3,d4,d5
		
		repo --> 
		
		git add .
		git add f1.txt 
		git add *.txt 
		
		
		echo "hello"
		
		log 
		
		git status  (vs) git log 
		
		
		touch 
		
		echo "adfa" >> f1.txt 
		
		vi f1.txt 
		
		esc :wq	enter	===> save and exit from file
		rsc :q! enter	===> exit without save 
		
		
		Project_Folder :::
			index.jsp 
			properties 
			readme.md 
		
		git ignore.
		
		
		Java_web_app_project
			git init 
			
			vi .gitignore
			
			git add .
			
			git commit -m "initial commit"
			
			
			signin.class
			signin.java
			index.jsp 
			signup.java 		---> sql 
			db_credential
			secret 
			
			.gitignore
				db_credential
				secret
				signin.class
				
			git add .
			
			commited  ( local machine) 						>>> 				remote repo 
			
			
	git diff ::::
	
			git diff 
			git diff <commit_id> <commit_id1>
			
			git rm --cached <f1.txt>	==> Just remove from staging area, but will be thr in working dir
			git rm -f <f1.txt>			==> Just remove from staging area & from working dir
			
NEXT ::
	GIT :
		reset 
		revert
		branch...
		

  502  mkdir Mar13-Project
  503  cd Mar13-Project/
  504  pwd
  505  clear
  506  mkdir samplerepo1
  507  cd samplerepo1/
  508  pwd
  509  git --version
  510  clear
  511  git --version
  512  ls
  513  echo "rec1" >> file1.txt
  514  echo "Hello Team"
  515  ls
  516  cat file1.txt
  517  echo "Hello Team" >> file1.txt
  518  cat file1.txt
  519  clear
  520  ls
  521  ls -a
  522  git init
  523  ls -a
  524  cd .git
  525  ls
  526  cd ..
  527  ls
  528  clear
  529  git status
  530  git add file1.txt
  531  git status
  532  git commit -m "First Commit"
  533  git log
  534  git status
  535  touch file2.txt
  536  ls
  537  echo "rec1" >> file2.txt
  538  ls
  539  cat file2.txt
  540  git status
  541  git add file2.txt
  542  git status
  543  git commit -m "second commit"
  544  git log
  545  git config user.email "xyz@az.com"
  546  echo "rec2" >> file3.txt
  547  git add
  548  git add file3.txt
  549  git commit -m "third commit"
  550  git log
  551  ls
  552  ls -a
  553  git log
  554  cd ..
  555  mkdir samplerepo2
  556  cd samplerepo2/
  557  git init
  558  git status
  559  ls
  560  echo "rec1" >> f1.txt
  561  git status
  562  git add f1.txt
  563  git statsu
  564  git status
  565  git commit -m "CM1"
  566  git status
  567  git log
  568  ls
  569  clear
  570  ls
  571  echo "rec1" >> f2.txt
  572  echo "rec1" >> f3.txt
  573  echo "rec1" >> f4.txt
  574  git status
  575  git add .
  576  git status
  577  git commit -m "CM2"
  578  git log
  579  clear
  580  echo "rec1" >> s1.txt
  581  echo "rec1" >> j1.java
  582  echo "rec1" >> j2.java
  583  echo "rec1" >> readme.md
  584  ls
  585  git status
  586  git add *.java
  587  git status
  588  git commit -m "CM3"
  589  echo "Hello"
  590  echo "Hello" >> s1.txt
  591  cat s1.txt
  592  clear
  593  echo "Hello" >> s1.txt
  594  cat s1.txt
  595  echo "Hello" >> s1.txt
  596  cat s1.txt
  597  echo "Hello" > s1.txt
  598  cat s1.txt
  599  git status
  600  git add .
  601  git log
  602  git commit -m "CM4"
  603  git log
  604  clear
  605  git log
  606  echo "adfasdf" >> q1.txt
  607  cat q1.txt
  608  clear
  609  git log
  610  git log --oneline
  611  git log -2
  612  git log -2 --oneline
  613  git log --stat
  614  git log --stat -2
  615  git status
  616  git add .
  617  git commit -m "CM5"
  618  git log
  619  git log --oneline
  620  git show 63e1fa1
  621  echo "aadsfadf" >> s1.txt
  622  git add .
  623  git commit -m "CM6"
  624  git log --oneline
  625  git show 139c893
  626  git show 63e1fa1
  627  vi s1.txt
  628  git add .
  629  git commit -m "CM7"
  630  git log --oneline
  631  git show 85aaef8
  632  clear
  633  ls
  634  vi f1.txt
  635  cat f1.txt
  636  vi f1.txt
  637  ls f1.txt
  638  cat f1.txt
  639  clear
  640  clear
  641  ls
  642  cd ..
  643  mkdir samplerepo3
  644  cd samplerepo3
  645  git status
  646  git init
  647  git status
  648  clear
  649  ls -a
  650  vi .gitignore
  651  git status
  652  git add .
  653  git commit -m "Initial commit for git ignore"
  654  git status
  655  ls -a
  656  cat .gitignore
  657  echo "rec1" >> s1.java
  658  echo "rec1" >> q1.doc
  659  ls
  660  git status
  661  ehco "afasd" >> sample.txt
  662  echo "afasd" >> sample.txt
  663  git status
  664  git add .
  665  git commit -m "CM1"
  666  git log
  667  clear
  668  ls
  669  git status
  670  cat s1.java
  671  echo "adfasd" >> s1.java
  672  git diff
  673  git add .
  674  git diff
  675  git diff --cached
  676  git diff --cached --name-only
  677  git commit -m "changed s1"
  678  git diff --cached --name-only
  679  git diff HEAD
  680  clear
  681  git log --oneline
  682  git diff 735cf3f 36f9836
  683  git diff 36f9836 735cf3f
  684  clear
  685  git status
  686  ls
  687  echo "rec" >> s2.java
  688  ls
  689  git add .
  690  git status
  691  ls
  692  git rm --cached s2.java
  693  git status
  694  git add s2.java
  695  git status
  696  ls
  697  git rm -f s2.java
  698  git status
  699  ls
  700  echo "rec1" >> s3.java
  701  git add .
  702  git status
  703  git rm --cached s3.java
  704  git status
  705  git commit -m "adfas"
  706  history
